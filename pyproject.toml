[project]
name = "habitui"
dynamic = ["version"]
description = "example package"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Random Hacker", email = "no@dev.null" }]
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pyhumps>=3.8.0",
    "rich>=13.7.0",
    "textual>=0.79.0",
    "loguru>=0.7.0",
    "sqlmodel>=0.0.22",
    "emoji-data-python>=0.2.0",
    "httpx>=0.27.0",
    "python-box>=7.1.1",
    "python-dateutil",
    "art",
        "emoji",
"emoji-data"

]

[tool.uv]
python-preference = "system"
dev-dependencies = [
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "sqlalchemy[mypy]",
    "pydantic[mypy]",
    "textual-dev",
]

[project.scripts]
habitui = "habitui.main:main"

[tool.black]
line-length = 99
target-version = ["py313"]

[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src"]
preview = true
fix = true
show-fixes = true
indent-width = 4

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120
indent-style = "space"
line-ending = "auto"
preview = true
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",
    "BLE001",
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method (NOTE: often includes __init__)
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method (e.g., __str__, __repr__)
    "D107",
    "DOC201",
    "DOC501",
    "FBT001",
    "FBT002",
    "FBT003",
    "PGH003",
    "RUF012",
    "PLR2004",
    "TRY300",
    "TRY301",
    "CPY001",
    "DOC402",
    "PLR6301",
    "TC001",
    "TC003",
    "ANN002",
    "ANN003",
    "S105"
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 150

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]
allow-magic-value-types = ["int"]
max-args = 10
max-bool-expr = 10
max-branches = 15
max-locals = 20
max-nested-blocks = 10
max-positional-args = 5
max-public-methods = 30
max-statements = 75
max-returns = 10

[tool.ruff.lint.isort]
from-first = true
combine-as-imports = true
force-sort-within-sections = true
force-wrap-aliases = true
known-first-party = ["habitui"]
known-local-folder = ["src"]
length-sort = true
lines-after-imports = 2
lines-between-types = 1
order-by-type = true
relative-imports-order = "furthest-to-closest"
required-imports = ["from __future__ import annotations"]
no-lines-before = ["future", "standard-library"]
known-third-party = [
    "sqlmodel",
    "sqlalchemy",
    "pydantic",
    "pydantic_settings",
    "loguru",
    "textual",
    "rich",
    "httpx",
    "box",
    "humps",
    "emoji_data_python",
]
section-order = [
    "future",
    "typing",
    "standard-library",
    "logging",
    "rich",
    "textual",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"textual" = ["textual"]
"rich" = ["rich"]
logging = ["logging", "loguru"]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlmodel.SQLModel",
    "sqlalchemy.orm.DeclarativeBase",
    "textual.app.App",
    "textual.widget.Widget",
]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
no_implicit_optional = true
no_implicit_reexport = true
python_version = "3.13"
strict = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = "sqlmodel.sql._expression_select_gen"
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "sqlmodel.*"
ignore_missing_imports = true
